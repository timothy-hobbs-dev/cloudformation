AWSTemplateFormatVersion: "2010-09-09"
Parameters:
  User1Email:
    Type: String
    Description: Email for User1 stored in Parameter Store
  User2Email:
    Type: String
    Description: Email for User2 stored in Parameter Store
  User720Email:
    Type: String
    Description: Email for User720 stored in Parameter Store
  User1000Email:
    Type: String
    Description: Email for User1000 stored in Parameter Store
  User3000Email:
    Type: String
    Description: Email for User3000 stored in Parameter Store
  User4000Email:
    Type: String
    Description: Email for User4000 stored in Parameter Store
  User5000Email:
    Type: String
    Description: Email for User5000 stored in Parameter Store
  User6000Email:
    Type: String
    Description: Email for User6000 stored in Parameter Store

Resources:
  ## S3 Read-Only Group
  S3ReadOnlyGroup:
    Type: "AWS::IAM::Group"
    Properties:
      GroupName: "S3ReadOnlyGroup"
      Policies:
        - PolicyName: "S3ReadOnlyPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "s3:GetObject"
                  - "s3:ListBucket"
                Resource: "*"

  ## EC2 Group with S3 Access
  EC2GroupWithS3Access:
    Type: "AWS::IAM::Group"
    Properties:
      GroupName: "EC2GroupWithS3Access"
      Policies:
        - PolicyName: "EC2S3ReadOnlyPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "s3:GetObject"
                  - "s3:ListBucket"
                Resource: "*"

  ## Secrets Manager - OTP for IAM Users
  IAMUserSecret:
    Type: "AWS::SecretsManager::Secret"
    Properties:
      Name: "IAMUserSecret"
      Description: "Auto-generated one-time password for IAM users"
      GenerateSecretString:
        SecretStringTemplate: '{"Password":""}'
        GenerateStringKey: "Password"
        PasswordLength: 16
        ExcludeCharacters: '"@/\\'

  ## IAM Users
  IAMUser1:
    Type: "AWS::IAM::User"
    Properties:
      UserName: "User1"
      Groups:
        - Ref: "S3ReadOnlyGroup"
      LoginProfile:
        Password: !Sub "{{resolve:secretsmanager:${IAMUserSecret}::Password}}"
        PasswordResetRequired: true

  IAMUser2:
    Type: "AWS::IAM::User"
    Properties:
      UserName: "User2"
      Groups:
        - Ref: "EC2GroupWithS3Access"
      LoginProfile:
        Password: !Sub "{{resolve:secretsmanager:${IAMUserSecret}::Password}}"
        PasswordResetRequired: true

  IAMUser3:
    Type: "AWS::IAM::User"
    Properties:
      UserName: "User3"
      Groups:
        - Ref: "EC2GroupWithS3Access"
      LoginProfile:
        Password: !Sub "{{resolve:secretsmanager:${IAMUserSecret}::Password}}"
        PasswordResetRequired: true

  IAMUser4:
    Type: "AWS::IAM::User"
    Properties:
      UserName: "User4"
      Groups:
        - Ref: "EC2GroupWithS3Access"
      LoginProfile:
        Password: !Sub "{{resolve:secretsmanager:${IAMUserSecret}::Password}}"
        PasswordResetRequired: true

  IAMUser720:
    Type: "AWS::IAM::User"
    Properties:
      UserName: "User720"
      Groups:
        - Ref: "EC2GroupWithS3Access"
      LoginProfile:
        Password: !Sub "{{resolve:secretsmanager:${IAMUserSecret}::Password}}"
        PasswordResetRequired: true

  ## Parameter Store for emails
  User1EmailParameter:
    Type: "AWS::SSM::Parameter"
    Properties:
      Name: "User1Email"
      Type: "String"
      Value: !Ref "User1Email"

  User2EmailParameter:
    Type: "AWS::SSM::Parameter"
    Properties:
      Name: "User2Email"
      Type: "String"
      Value: !Ref "User2Email"

  User6000EmailParameter:
    Type: "AWS::SSM::Parameter"
    Properties:
      Name: "User6000Email"
      Type: "String"
      Value: !Ref "User6000Email"

  ## EventBridge Rule to detect user creation
  UserCreationEventRule:
    Type: "AWS::Events::Rule"
    Properties:
      EventPattern:
        source:
          - "aws.cloudformation"
        detail-type:
          - "AWS API Call via CloudTrail"
        detail:
          eventSource:
            - "cloudformation.amazonaws.com"
          eventName:
            - "ExecuteChangeSet"
      Targets:
        - Arn: !GetAtt SendEmailLambda.Arn
          Id: "SendEmailLambdaTarget"

  ## Lambda Function for sending user info
  SendEmailLambda:
    Type: "AWS::Lambda::Function"
    Properties:
      FunctionName: "SendEmailLambda"
      Handler: "index.handler"
      Runtime: "python3.8"
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          import boto3

          def handler(event, context):
              ssm = boto3.client('ssm')
              secrets_manager = boto3.client('secretsmanager')

              user1_email = ssm.get_parameter(Name='User1Email')['Parameter']['Value']
              user2_email = ssm.get_parameter(Name='User2Email')['Parameter']['Value']

              secret_value = secrets_manager.get_secret_value(SecretId='IAMUserSecret')
              password = eval(secret_value['SecretString'])['Password']

              print(f"User1: {user1_email}, Password: {password}")
              print(f"User2: {user2_email}, Password: {password}")

  ## Lambda Execution Role
  LambdaExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: "LambdaExecutionRole"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: "lambda.amazonaws.com"
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: "LambdaPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "ssm:GetParameter"
                  - "secretsmanager:GetSecretValue"
                Resource: "*"
              - Effect: "Allow"
                Action:
                  - "logs:*"
                Resource: "*"
